Implementar el motor de llamadas Async para los handlers (No utilizar futuros. El objetivo es tener los procesos abiertos en función del número de cores. Quizá se podrían ejecutar como actores)
Refactorizar Request, Response y session. Crear interfaces y/o clases abstractas si es necesario
Pensar e implementar el LOG (peticiones HTTP y otro de detalle)
Pasar la opciones el server en el arranque
Comprobar la memoria y hacer fine-tunning
Comprobar el uso de CPU y hace fine tunning
Comprobar el tema del pipelining de peticiones
comenzar a meter tests
Sin prioridad: Hacer que el server acepte requests en pipeline
El servidor debe tener la responsabilidad de codificar el response para mandar por el canuto
Comprobar la integridad de las cabeceras Http request/response
Poner comentarios explicativos de codigoo
En request/response quitar la variable raw y sus getters/setters
Revisar le tratamiento de exepciones
Revisar el tratamiento de los nulos
Limitar el tamano del header recibido, para evitar ataques
Cerrar sesiones cuando pase un tiempo prudencial (anadir parametro en la inicialización del httpserver)
Implementar el encoding del server
Hacer todos los checks de integridad para la cabecera request/response
Asegurar que las conexiones se cierran cuando las cierra el cliente
Al realizar pipelining solucionar el problema cuando la petición se recibe en varias lecturas (posiblmente se culpa de mi cliente pero si se soluciona ahorramos problemas)
Anadir el concepto de connector (conector Http, Conector Http2, Custom ...). Quizá implementando un patrón visitante (ver los filters de finagle)
Hacer documentacion (sudo sysctl -w kern.ipc.somaxconn=2048, ampliar ficheros permitods, ampliar procesos)
Libreria de try-cacth al estilo de optionals

